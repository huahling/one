package com.everyThreadtooneFile.client;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.*;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.bytes.ByteArrayEncoder;
import io.netty.handler.codec.string.StringDecoder;
import io.netty.handler.stream.ChunkedWriteHandler;

public class ClientThread extends Thread{

	private String bathpath;
	private int mark;

	public ClientThread(String bathpath, int mark) {
		this.mark=mark;
		this.bathpath=bathpath;
	}


	@Override
	public void run() {
		try {
			new ClientThread(bathpath,mark).connect(6299,"192.168.31.141");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

		public void connect(int port,String host)throws Exception {
			EventLoopGroup group = new NioEventLoopGroup();

				Bootstrap b = new Bootstrap();
				try {
				b.group(group).channel(NioSocketChannel.class)
						.option(ChannelOption.TCP_NODELAY, true)
						.handler(new ChannelInitializer<SocketChannel>() {
							@Override
							public void initChannel(SocketChannel ch) throws Exception {
								ChannelPipeline p = ch.pipeline();

								p.addLast(new ByteArrayEncoder());
								p.addLast(new StringDecoder());
								p.addLast(new ChunkedWriteHandler());
								p.addLast(new EnCoder());
								p.addLast(new ClientHandler(mark, bathpath));
							}
						});

					ChannelFuture f = b.connect(host,port).sync();
				f.channel().closeFuture().sync();
			} finally {
				group.shutdownGracefully();
			}
		}

}
